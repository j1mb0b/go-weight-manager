// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/j1mb0b/go-weight-manager/proto"
)

// WMServiceClient is an autogenerated mock type for the WMServiceClient type
type WMServiceClient struct {
	mock.Mock
}

// AddEntry provides a mock function with given fields: ctx, in, opts
func (_m *WMServiceClient) AddEntry(ctx context.Context, in *proto.WeightEntry, opts ...grpc.CallOption) (*proto.EntryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddEntry")
	}

	var r0 *proto.EntryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WeightEntry, ...grpc.CallOption) (*proto.EntryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WeightEntry, ...grpc.CallOption) *proto.EntryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EntryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WeightEntry, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyzeWeight provides a mock function with given fields: ctx, in, opts
func (_m *WMServiceClient) AnalyzeWeight(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.EntryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeWeight")
	}

	var r0 *proto.EntryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) (*proto.EntryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) *proto.EntryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EntryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEntry provides a mock function with given fields: ctx, in, opts
func (_m *WMServiceClient) DeleteEntry(ctx context.Context, in *proto.EntryID, opts ...grpc.CallOption) (*proto.EntryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntry")
	}

	var r0 *proto.EntryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.EntryID, ...grpc.CallOption) (*proto.EntryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.EntryID, ...grpc.CallOption) *proto.EntryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EntryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.EntryID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntries provides a mock function with given fields: ctx, in, opts
func (_m *WMServiceClient) GetEntries(ctx context.Context, in *proto.UserID, opts ...grpc.CallOption) (*proto.WeightEntries, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEntries")
	}

	var r0 *proto.WeightEntries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UserID, ...grpc.CallOption) (*proto.WeightEntries, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UserID, ...grpc.CallOption) *proto.WeightEntries); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.WeightEntries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UserID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEntry provides a mock function with given fields: ctx, in, opts
func (_m *WMServiceClient) UpdateEntry(ctx context.Context, in *proto.WeightEntry, opts ...grpc.CallOption) (*proto.EntryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEntry")
	}

	var r0 *proto.EntryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WeightEntry, ...grpc.CallOption) (*proto.EntryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WeightEntry, ...grpc.CallOption) *proto.EntryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EntryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WeightEntry, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWMServiceClient creates a new instance of WMServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWMServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WMServiceClient {
	mock := &WMServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
